
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users: Can read all, can only write to their own document.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
    }
    
    // Posts and their subcollections (comments)
    match /posts/{postId} {
      // Anyone logged in can read posts
      allow read: if request.auth != null;
      // Only the author can create, update, or delete their own post
      allow create, update, delete: if isOwner(request.resource.data.authorId);

      // Comments subcollection
      match /comments/{commentId} {
        // Anyone logged in can read comments
        allow read: if request.auth != null;
        // Anyone logged in can create a comment
        allow create: if request.auth != null;
        // Only the author of the comment can delete it
        allow delete: if isOwner(resource.data.authorId);
      }
    }

    // Events: Anyone logged in can read, only owner can write/delete
    match /events/{eventId} {
        allow read: if request.auth != null;
        allow create, delete: if isOwner(request.resource.data.userId);
    }

    // Forum Topics and their subcollections (replies)
    match /forumTopics/{topicId} {
        allow read: if request.auth != null;
        allow create, update: if isOwner(request.resource.data.authorId);
        // Only the topic author can delete it
        allow delete: if isOwner(resource.data.authorId);

        match /replies/{replyId} {
            allow read: if request.auth != null;
            allow create: if request.auth != null;
            // A user can delete their own reply
            allow delete: if isOwner(resource.data.authorId);
        }
    }

    // Farm Plots
    match /farmPlots/{plotId} {
        allow read, write: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
    }

    // Harvests and their subcollections (harvestPlots)
    match /harvests/{harvestId} {
        // User can only interact with their own harvests
        allow read, delete, create: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
        allow update: if isOwner(request.resource.data.userId);

        match /harvestPlots/{plotId} {
            // User can only interact with plots within their own harvests
            allow read, delete, create: if isOwner(request.resource.data.userId);
            allow update: if isOwner(request.resource.data.userId);
            
            // Operations within a harvest plot
             match /operations/{operationId} {
                allow read, write: if isOwner(get(/databases/$(database)/documents/harvests/$(harvestId)).data.userId);
            }
        }
    }
    
    // Items (insumos)
    match /items/{itemId} {
         allow read, write: if isOwner(resource.data.userId);
         allow create: if isOwner(request.resource.data.userId);
    }

    // Inventory Logs
    match /inventoryLogs/{logId} {
         allow read, write: if isOwner(resource.data.userId);
         allow create: if isOwner(request.resource.data.userId);
    }

    // Machinery and its subcollections (maintenances)
    match /machinery/{machineId} {
         allow read, write: if isOwner(resource.data.userId);
         allow create: if isOwner(request.resource.data.userId);

         // Maintenances subcollection
         match /maintenances/{maintenanceId} {
            // Allow read/write if the user owns the parent machine
            allow read, write: if isOwner(get(/databases/$(database)/documents/machinery/$(machineId)).data.userId);
            allow create: if isOwner(request.resource.data.userId);
         }
    }

    // Listings (Marketplace)
    match /listings/{listingId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if isOwner(resource.data.userId);
    }

    // Chats
    match /chats/{chatId} {
      // Allow read/write if the user's ID is in the chat ID (which is userId1_userId2)
      allow read, write: if request.auth != null && request.auth.uid in chatId.split('_');

      match /messages/{messageId} {
        // Allow read if user is part of the chat, allow write if user is the sender
        allow read: if request.auth != null && request.auth.uid in chatId.split('_');
        allow create: if isOwner(request.resource.data.senderId);
      }
    }
  }
}
