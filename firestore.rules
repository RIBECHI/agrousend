rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users:
    // 1. Logged-in users can read any profile (for chat, profile pages)
    // 2. Users can only create, update and delete their own profile
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isOwner(userId);
    }

    // Posts & Comments:
    // 1. Any logged-in user can read all posts and comments.
    // 2. Users can create posts and comments.
    // 3. Users can only update or delete their OWN posts and comments.
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.authorId);
      allow update, delete: if isOwner(resource.data.authorId);

      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.authorId);
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }

    // Events:
    // 1. Any logged-in user can read events.
    // 2. Users can create events.
    // 3. Users can only delete their own events.
    match /events/{eventId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.userId);
        allow delete: if isOwner(resource.data.userId);
    }
    
    // Forum Topics & Replies:
    // 1. Any logged-in user can read all topics and replies.
    // 2. Users can create topics and replies.
    // 3. Users can only update or delete their OWN topics and replies.
    match /forumTopics/{topicId} {
      allow read: if request.auth != null;
      allow create, update: if isOwner(request.resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      match /replies/{replyId} {
        allow read: if request.auth != null;
        allow create: if isOwner(request.resource.data.authorId);
        allow update, delete: if isOwner(resource.data.authorId);
      }
    }
    
    // Chat Messages:
    // 1. Users can only read/write messages in chats they are part of.
    // Chat ID is formatted as: sortedUID1_sortedUID2
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in chatId.split('_');
    }

    // Farm Plots:
    // Users can only manage their own farm plots.
    match /farmPlots/{plotId} {
        allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }

    // Machinery:
    // Users can only manage their own machinery.
    match /machinery/{machineId} {
        allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }
    
    // Items (Insumos):
    // Users can only manage their own items.
    match /items/{itemId} {
        allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }

    // Inventory Logs:
    // Users can only create logs for their own account, and only read their own logs.
    match /inventoryLogs/{logId} {
        allow read: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if false; // Logs should be immutable
    }

    // Harvests and their subcollections:
    // Users can only manage their own harvests and related data.
    match /harvests/{harvestId} {
        allow read, create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
        
        // Harvest Plots (the link between a harvest and a farm plot)
        match /harvestPlots/{harvestPlotId} {
            // Check if the user owns the parent harvest document
            allow read, create, update, delete: if get(/databases/$(database)/documents/harvests/$(harvestId)).data.userId == request.auth.uid;
            
            // Operations within a specific plot for a specific harvest
            match /operations/{operationId} {
               allow read, create, update, delete: if get(/databases/$(database)/documents/harvests/$(harvestId)).data.userId == request.auth.uid;
            }
        }
    }
    
     // Listings (Marketplace):
    // 1. Any logged-in user can read all listings.
    // 2. Users can create listings.
    // 3. Users can only update or delete their OWN listings.
    match /listings/{listingId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}