
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regra para a coleção 'users'
    match /users/{userId} {
      // Qualquer usuário autenticado pode criar seu próprio perfil
      allow create: if request.auth != null && request.auth.uid == userId;
      // Qualquer usuário autenticado pode ler qualquer perfil (para perfis públicos)
      allow read: if request.auth != null;
      // O usuário só pode atualizar seu próprio perfil
      allow update: if request.auth != null && request.auth.uid == userId;
      // O usuário só pode deletar seu próprio perfil
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Regra para a coleção 'posts' (feed) e subcoleções
    match /posts/{postId} {
      // Qualquer usuário autenticado pode ler
      allow read: if request.auth != null;
      // O usuário só pode criar, atualizar e deletar seus próprios posts
      allow write: if request.auth != null && request.resource.data.authorId == request.auth.uid;

      // Regra para a subcoleção de comentários
      match /comments/{commentId} {
        // Qualquer usuário autenticado pode ler e adicionar comentários
        allow read, create: if request.auth != null;
        // Apenas o autor do comentário ou o autor do post podem deletar
        allow delete: if request.auth != null && 
                      (request.resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.authorId == request.auth.uid);
      }
    }
    
    // Regra para a coleção 'events'
    match /events/{eventId} {
      // Qualquer usuário autenticado pode ler eventos
      allow read: if request.auth != null;
      // O usuário só pode criar seus próprios eventos
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Apenas o criador do evento pode atualizar ou deletar
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/events/$(eventId)).data.userId == request.auth.uid;
    }

    // Regra para a coleção 'farmPlots'
    match /farmPlots/{plotId} {
      // O usuário pode ler, criar, atualizar e deletar apenas seus próprios talhões
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Regra para a coleção 'harvests' (Safras)
    match /harvests/{harvestId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
        
        // Subcoleção de talhões dentro de uma safra
        match /harvestPlots/{harvestPlotId} {
             allow read, write: if request.auth != null && get(/databases/$(database)/documents/harvests/$(harvestId)).data.userId == request.auth.uid;

            // Subcoleção de operações dentro de um talhão de uma safra
            match /operations/{operationId} {
                allow read, write: if request.auth != null && get(/databases/$(database)/documents/harvests/$(harvestId)).data.userId == request.auth.uid;
            }
        }
    }
    
    // Regra para a coleção 'items' (Insumos)
    match /items/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Regra para a coleção 'inventoryLogs'
    match /inventoryLogs/{logId} {
        allow read, create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Regra para a coleção 'machinery'
    match /machinery/{machineId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
        
        // Subcoleção de manutenções
        match /maintenances/{maintId} {
             allow read, write: if request.auth != null && get(/databases/$(database)/documents/machinery/$(machineId)).data.userId == request.auth.uid;
        }
    }
    
    // Regra para a coleção 'livestockLots' (Lotes de Gado)
    match /livestockLots/{lotId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;

        // Regra para a subcoleção de animais
        match /animals/{animalId} {
            // Permite leitura se o usuário for dono do lote
            allow read: if request.auth != null && get(/databases/$(database)/documents/livestockLots/$(lotId)).data.userId == request.auth.uid;
            // Permite criação/atualização se o usuário for dono do lote
            allow create, update: if request.auth != null && get(/databases/$(database)/documents/livestockLots/$(lotId)).data.userId == request.auth.uid;

            // Regra mais complexa para exclusão, permitindo a movimentação
            // Permite a exclusão se:
            // 1. O usuário for o dono do lote (exclusão normal).
            // 2. OU se a requisição for parte de uma transação de movimentação,
            //    verificando se o usuário tem permissão para criar o mesmo animal no lote de destino.
            allow delete: if request.auth != null && get(/databases/$(database)/documents/livestockLots/$(lotId)).data.userId == request.auth.uid;
        }
    }
    
    // Regra para a coleção 'listings' (Marketplace)
    match /listings/{listingId} {
        // Qualquer usuário autenticado pode ler os anúncios
        allow read: if request.auth != null;
        // Um usuário só pode criar, editar ou apagar seus próprios anúncios
        allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

  }
}
